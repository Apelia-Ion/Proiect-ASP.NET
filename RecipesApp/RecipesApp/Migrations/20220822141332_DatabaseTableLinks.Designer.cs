// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipesApp.Entities;

namespace RecipesApp.Migrations
{
    [DbContext(typeof(RecipesAppContext))]
    [Migration("20220822141332_DatabaseTableLinks")]
    partial class DatabaseTableLinks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RecipesApp.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChefId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChefId")
                        .IsUnique()
                        .HasFilter("[ChefId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RecipesApp.Entities.Chef", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chef");
                });

            modelBuilder.Entity("RecipesApp.Entities.ChefRecipe", b =>
                {
                    b.Property<string>("ChefId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChefId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("ChefRecipe");
                });

            modelBuilder.Entity("RecipesApp.Entities.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Steps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipesApp.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChefId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RecipeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChefId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("RecipesApp.Entities.Address", b =>
                {
                    b.HasOne("RecipesApp.Entities.Chef", "Chef")
                        .WithOne("Address")
                        .HasForeignKey("RecipesApp.Entities.Address", "ChefId");

                    b.Navigation("Chef");
                });

            modelBuilder.Entity("RecipesApp.Entities.ChefRecipe", b =>
                {
                    b.HasOne("RecipesApp.Entities.Chef", "Chef")
                        .WithMany("ChefRecipe")
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipesApp.Entities.Recipe", "Recipe")
                        .WithMany("ChefRecipe")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipesApp.Entities.Review", b =>
                {
                    b.HasOne("RecipesApp.Entities.Chef", "Chef")
                        .WithMany()
                        .HasForeignKey("ChefId");

                    b.HasOne("RecipesApp.Entities.Recipe", "Recipe")
                        .WithMany("Reviews")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Chef");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipesApp.Entities.Chef", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("ChefRecipe");
                });

            modelBuilder.Entity("RecipesApp.Entities.Recipe", b =>
                {
                    b.Navigation("ChefRecipe");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
